//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/UserInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gameplay.Input
{
    public partial class @UserInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputs"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""7827b0e3-9066-4555-a9d9-a12d1c06dadb"",
            ""actions"": [
                {
                    ""name"": ""MoveKeys"",
                    ""type"": ""Value"",
                    ""id"": ""2c1d897d-c6ca-4b91-b061-840aba0c2c20"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e566a59-48dd-4266-b4ad-eecddda46dfe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75cc0b3b-3773-427c-a09c-7766c0f90c54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31606513-6cf0-427e-ae3c-9848bda6d829"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adcad6f4-60ce-4f6b-a750-5dd5075ddbba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""6d090fe6-2110-47c1-a3fa-e5a25835e777"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""eeddbc36-967d-4996-9a83-68f3af94af76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPositionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""24a144f5-132a-4890-a0c2-799d72983093"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""26026e0a-d0c5-41d9-8c2e-56df7e0b466e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""262f2101-22bd-4480-a17c-dd5a156a4e9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleButton"",
                    ""type"": ""Button"",
                    ""id"": ""e9d2a939-1b24-4f88-942e-9a0538e18bda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb7515ba-f910-453f-9a50-a97ce6df793c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04116c3b-604b-45e2-acf3-a5358707bd10"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""PointerPositionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41fa5a80-9199-480e-8a83-082ca5498804"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d42c3cc-1eb2-4bed-aa8c-287b4c84d67d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd55c067-9e11-48f7-b00f-7a9d8acf03d3"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MiddleButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""f31d8c43-9ab8-4345-9727-67c048c8aca9"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""e41bd1f3-8964-49b0-86b2-56a6850dc633"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e9f9c33-62c2-44aa-9129-e706ec348005"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Input"",
            ""bindingGroup"": ""Input"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_MoveKeys = m_Keyboard.FindAction("MoveKeys", throwIfNotFound: true);
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_PointerPosition = m_Mouse.FindAction("PointerPosition", throwIfNotFound: true);
            m_Mouse_PointerPositionDelta = m_Mouse.FindAction("PointerPositionDelta", throwIfNotFound: true);
            m_Mouse_PrimaryButton = m_Mouse.FindAction("PrimaryButton", throwIfNotFound: true);
            m_Mouse_SecondaryButton = m_Mouse.FindAction("SecondaryButton", throwIfNotFound: true);
            m_Mouse_MiddleButton = m_Mouse.FindAction("MiddleButton", throwIfNotFound: true);
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_TouchPress = m_Touch.FindAction("TouchPress", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private IKeyboardActions m_KeyboardActionsCallbackInterface;
        private readonly InputAction m_Keyboard_MoveKeys;
        public struct KeyboardActions
        {
            private @UserInputs m_Wrapper;
            public KeyboardActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveKeys => m_Wrapper.m_Keyboard_MoveKeys;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
                {
                    @MoveKeys.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveKeys;
                    @MoveKeys.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveKeys;
                    @MoveKeys.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMoveKeys;
                }
                m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveKeys.started += instance.OnMoveKeys;
                    @MoveKeys.performed += instance.OnMoveKeys;
                    @MoveKeys.canceled += instance.OnMoveKeys;
                }
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);

        // Mouse
        private readonly InputActionMap m_Mouse;
        private IMouseActions m_MouseActionsCallbackInterface;
        private readonly InputAction m_Mouse_PointerPosition;
        private readonly InputAction m_Mouse_PointerPositionDelta;
        private readonly InputAction m_Mouse_PrimaryButton;
        private readonly InputAction m_Mouse_SecondaryButton;
        private readonly InputAction m_Mouse_MiddleButton;
        public struct MouseActions
        {
            private @UserInputs m_Wrapper;
            public MouseActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerPosition => m_Wrapper.m_Mouse_PointerPosition;
            public InputAction @PointerPositionDelta => m_Wrapper.m_Mouse_PointerPositionDelta;
            public InputAction @PrimaryButton => m_Wrapper.m_Mouse_PrimaryButton;
            public InputAction @SecondaryButton => m_Wrapper.m_Mouse_SecondaryButton;
            public InputAction @MiddleButton => m_Wrapper.m_Mouse_MiddleButton;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterface != null)
                {
                    @PointerPosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPosition;
                    @PointerPositionDelta.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPositionDelta;
                    @PointerPositionDelta.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPositionDelta;
                    @PointerPositionDelta.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPointerPositionDelta;
                    @PrimaryButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @SecondaryButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @MiddleButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMiddleButton;
                    @MiddleButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMiddleButton;
                    @MiddleButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMiddleButton;
                }
                m_Wrapper.m_MouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PointerPosition.started += instance.OnPointerPosition;
                    @PointerPosition.performed += instance.OnPointerPosition;
                    @PointerPosition.canceled += instance.OnPointerPosition;
                    @PointerPositionDelta.started += instance.OnPointerPositionDelta;
                    @PointerPositionDelta.performed += instance.OnPointerPositionDelta;
                    @PointerPositionDelta.canceled += instance.OnPointerPositionDelta;
                    @PrimaryButton.started += instance.OnPrimaryButton;
                    @PrimaryButton.performed += instance.OnPrimaryButton;
                    @PrimaryButton.canceled += instance.OnPrimaryButton;
                    @SecondaryButton.started += instance.OnSecondaryButton;
                    @SecondaryButton.performed += instance.OnSecondaryButton;
                    @SecondaryButton.canceled += instance.OnSecondaryButton;
                    @MiddleButton.started += instance.OnMiddleButton;
                    @MiddleButton.performed += instance.OnMiddleButton;
                    @MiddleButton.canceled += instance.OnMiddleButton;
                }
            }
        }
        public MouseActions @Mouse => new MouseActions(this);

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_TouchPress;
        public struct TouchActions
        {
            private @UserInputs m_Wrapper;
            public TouchActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchPress => m_Wrapper.m_Touch_TouchPress;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @TouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                    @TouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                    @TouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TouchPress.started += instance.OnTouchPress;
                    @TouchPress.performed += instance.OnTouchPress;
                    @TouchPress.canceled += instance.OnTouchPress;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        private int m_InputSchemeIndex = -1;
        public InputControlScheme InputScheme
        {
            get
            {
                if (m_InputSchemeIndex == -1) m_InputSchemeIndex = asset.FindControlSchemeIndex("Input");
                return asset.controlSchemes[m_InputSchemeIndex];
            }
        }
        public interface IKeyboardActions
        {
            void OnMoveKeys(InputAction.CallbackContext context);
        }
        public interface IMouseActions
        {
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnPointerPositionDelta(InputAction.CallbackContext context);
            void OnPrimaryButton(InputAction.CallbackContext context);
            void OnSecondaryButton(InputAction.CallbackContext context);
            void OnMiddleButton(InputAction.CallbackContext context);
        }
        public interface ITouchActions
        {
            void OnTouchPress(InputAction.CallbackContext context);
        }
    }
}
