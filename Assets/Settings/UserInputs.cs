//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/UserInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gameplay.Input
{
    public partial class @UserInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputs"",
    ""maps"": [
        {
            ""name"": ""Moving"",
            ""id"": ""7827b0e3-9066-4555-a9d9-a12d1c06dadb"",
            ""actions"": [
                {
                    ""name"": ""MoveKeys"",
                    ""type"": ""Value"",
                    ""id"": ""2c1d897d-c6ca-4b91-b061-840aba0c2c20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""584ce157-4e3f-4482-a40e-6c2f872ecb85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""148d717a-cda8-427a-ba40-2d73dbed1e47"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""de71a7e0-77e1-4118-9c72-87d1ef6b7673"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c59526b2-6070-43f4-be8a-188710479b88"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b82edb51-f0d1-4030-9693-6f57845a93c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""880f6827-00d3-4d7c-a5ff-1af608b74dab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""402c24bb-858a-4835-a5fc-67abd23dc38b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""14928281-15e3-400d-8c2f-be02d747414b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""544337de-1ae4-42c9-815a-8a1b82436d6f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5eeac92a-c93b-4b61-99dd-2167ad1c65ea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9b31360-100c-4976-bb7b-8b113ef0ca7f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b0ab661a-9fdb-4399-9ab9-a4787da2c173"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shooting"",
            ""id"": ""6d090fe6-2110-47c1-a3fa-e5a25835e777"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""26026e0a-d0c5-41d9-8c2e-56df7e0b466e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""262f2101-22bd-4480-a17c-dd5a156a4e9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleButton"",
                    ""type"": ""Button"",
                    ""id"": ""e9d2a939-1b24-4f88-942e-9a0538e18bda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""41fa5a80-9199-480e-8a83-082ca5498804"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3832e0fc-9570-49f5-91e7-73d3ccaf3133"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d42c3cc-1eb2-4bed-aa8c-287b4c84d67d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd55c067-9e11-48f7-b00f-7a9d8acf03d3"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""MiddleButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameControls"",
            ""id"": ""f31d8c43-9ab8-4345-9727-67c048c8aca9"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""e41bd1f3-8964-49b0-86b2-56a6850dc633"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e9f9c33-62c2-44aa-9129-e706ec348005"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Input"",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Input"",
            ""bindingGroup"": ""Input"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Moving
            m_Moving = asset.FindActionMap("Moving", throwIfNotFound: true);
            m_Moving_MoveKeys = m_Moving.FindAction("MoveKeys", throwIfNotFound: true);
            m_Moving_PointerPosition = m_Moving.FindAction("PointerPosition", throwIfNotFound: true);
            // Shooting
            m_Shooting = asset.FindActionMap("Shooting", throwIfNotFound: true);
            m_Shooting_Shoot = m_Shooting.FindAction("Shoot", throwIfNotFound: true);
            m_Shooting_SecondaryButton = m_Shooting.FindAction("SecondaryButton", throwIfNotFound: true);
            m_Shooting_MiddleButton = m_Shooting.FindAction("MiddleButton", throwIfNotFound: true);
            // GameControls
            m_GameControls = asset.FindActionMap("GameControls", throwIfNotFound: true);
            m_GameControls_TouchPress = m_GameControls.FindAction("TouchPress", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Moving
        private readonly InputActionMap m_Moving;
        private IMovingActions m_MovingActionsCallbackInterface;
        private readonly InputAction m_Moving_MoveKeys;
        private readonly InputAction m_Moving_PointerPosition;
        public struct MovingActions
        {
            private @UserInputs m_Wrapper;
            public MovingActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveKeys => m_Wrapper.m_Moving_MoveKeys;
            public InputAction @PointerPosition => m_Wrapper.m_Moving_PointerPosition;
            public InputActionMap Get() { return m_Wrapper.m_Moving; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovingActions set) { return set.Get(); }
            public void SetCallbacks(IMovingActions instance)
            {
                if (m_Wrapper.m_MovingActionsCallbackInterface != null)
                {
                    @MoveKeys.started -= m_Wrapper.m_MovingActionsCallbackInterface.OnMoveKeys;
                    @MoveKeys.performed -= m_Wrapper.m_MovingActionsCallbackInterface.OnMoveKeys;
                    @MoveKeys.canceled -= m_Wrapper.m_MovingActionsCallbackInterface.OnMoveKeys;
                    @PointerPosition.started -= m_Wrapper.m_MovingActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.performed -= m_Wrapper.m_MovingActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.canceled -= m_Wrapper.m_MovingActionsCallbackInterface.OnPointerPosition;
                }
                m_Wrapper.m_MovingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveKeys.started += instance.OnMoveKeys;
                    @MoveKeys.performed += instance.OnMoveKeys;
                    @MoveKeys.canceled += instance.OnMoveKeys;
                    @PointerPosition.started += instance.OnPointerPosition;
                    @PointerPosition.performed += instance.OnPointerPosition;
                    @PointerPosition.canceled += instance.OnPointerPosition;
                }
            }
        }
        public MovingActions @Moving => new MovingActions(this);

        // Shooting
        private readonly InputActionMap m_Shooting;
        private IShootingActions m_ShootingActionsCallbackInterface;
        private readonly InputAction m_Shooting_Shoot;
        private readonly InputAction m_Shooting_SecondaryButton;
        private readonly InputAction m_Shooting_MiddleButton;
        public struct ShootingActions
        {
            private @UserInputs m_Wrapper;
            public ShootingActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_Shooting_Shoot;
            public InputAction @SecondaryButton => m_Wrapper.m_Shooting_SecondaryButton;
            public InputAction @MiddleButton => m_Wrapper.m_Shooting_MiddleButton;
            public InputActionMap Get() { return m_Wrapper.m_Shooting; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
            public void SetCallbacks(IShootingActions instance)
            {
                if (m_Wrapper.m_ShootingActionsCallbackInterface != null)
                {
                    @Shoot.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                    @SecondaryButton.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSecondaryButton;
                    @MiddleButton.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMiddleButton;
                    @MiddleButton.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMiddleButton;
                    @MiddleButton.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMiddleButton;
                }
                m_Wrapper.m_ShootingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @SecondaryButton.started += instance.OnSecondaryButton;
                    @SecondaryButton.performed += instance.OnSecondaryButton;
                    @SecondaryButton.canceled += instance.OnSecondaryButton;
                    @MiddleButton.started += instance.OnMiddleButton;
                    @MiddleButton.performed += instance.OnMiddleButton;
                    @MiddleButton.canceled += instance.OnMiddleButton;
                }
            }
        }
        public ShootingActions @Shooting => new ShootingActions(this);

        // GameControls
        private readonly InputActionMap m_GameControls;
        private IGameControlsActions m_GameControlsActionsCallbackInterface;
        private readonly InputAction m_GameControls_TouchPress;
        public struct GameControlsActions
        {
            private @UserInputs m_Wrapper;
            public GameControlsActions(@UserInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchPress => m_Wrapper.m_GameControls_TouchPress;
            public InputActionMap Get() { return m_Wrapper.m_GameControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameControlsActions set) { return set.Get(); }
            public void SetCallbacks(IGameControlsActions instance)
            {
                if (m_Wrapper.m_GameControlsActionsCallbackInterface != null)
                {
                    @TouchPress.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnTouchPress;
                    @TouchPress.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnTouchPress;
                    @TouchPress.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnTouchPress;
                }
                m_Wrapper.m_GameControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TouchPress.started += instance.OnTouchPress;
                    @TouchPress.performed += instance.OnTouchPress;
                    @TouchPress.canceled += instance.OnTouchPress;
                }
            }
        }
        public GameControlsActions @GameControls => new GameControlsActions(this);
        private int m_InputSchemeIndex = -1;
        public InputControlScheme InputScheme
        {
            get
            {
                if (m_InputSchemeIndex == -1) m_InputSchemeIndex = asset.FindControlSchemeIndex("Input");
                return asset.controlSchemes[m_InputSchemeIndex];
            }
        }
        public interface IMovingActions
        {
            void OnMoveKeys(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
        }
        public interface IShootingActions
        {
            void OnShoot(InputAction.CallbackContext context);
            void OnSecondaryButton(InputAction.CallbackContext context);
            void OnMiddleButton(InputAction.CallbackContext context);
        }
        public interface IGameControlsActions
        {
            void OnTouchPress(InputAction.CallbackContext context);
        }
    }
}
